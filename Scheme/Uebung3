;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname Uebung3) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #t #t none #f () #f)))
;(define (fib n)
; (cond
; ((or (= n 0) (= n 1)) n)
; (else (+ (fib (- n 1))
; (fib (- n 2)))))
;)

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 2 a) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------

(define (fib n)
  (local (
          (define (fib_tr z a b)
            (cond
              ((or (= z 0) (= z 1)) b)
              (else (fib_tr (- z 1) b (+ a b))))))
     (fib_tr n 0 1)))

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 2 b) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------

; Die Geschwindigkeit und Ressourcen-Auslastung sind mit Akkumulator um einiges Geringer

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 3 a) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------
; Ausgabe 1: 43; Ausgabe 2: 2
;(define a 42)

;(let* ((a 1)
;      (b (+ a 1)))
;      b)

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 3 b) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------
; Ausgabe 1: Auswertung von Rechts nach Links; Ausgabe 2: Auswertung von Links nach Rechts

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 4 a) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------
; Ausgabe 1: 11; Ausgabe 2: 7
;(define x 1)
;(define y 5)
;((lambda (a b)
;   (+ (* 2 x) y))
; y x)

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 4 b) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------
; Bei Ausgabe 1 werden die Elemente die oben definierten Elemente verwendet
; Bei Ausgabe 2 werden die Elemente der Parameter verwendet, welche den umgekehrten oben definierten Elemente entsperechen

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 6  -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------

(define rect-calc-list
  (list (lambda (a b) (* a b)) (lambda (a b) (* 2 a b ))))

(define (calc-a-list l a b)
  (begin (for-each (lambda(x) (begin (print (x a b)) (newline))) l)
  (print 'finished))
  ) 
;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 7 a) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------
; Tel.Buch hängt rückgabe wert nicht nur von den Parametern ab, ausserdm werden Daten verändert (Side-Effect)

;------------------------------------------------------------------------------------------------------------------------------
;--------------------------------------------- Aufgabe 7 b) / c) -------------------------------------------------------------------
;------------------------------------------------------------------------------------------------------------------------------

(define my-phone-dir (list (list 'Adam 4711) (list 'Eva 4712)))

(define (look-at phone-dir name)
   (if (empty? phone-dir) (print '#false)
       (if (symbol=? (first (first phone-dir)) name)
           (print (first (rest (first phone-dir))))
               (look-at (rest phone-dir) name))
       ))
   
 (define (add-entry name number)
   (set! my-phone-dir (cons (list name number) my-phone-dir))
   )

